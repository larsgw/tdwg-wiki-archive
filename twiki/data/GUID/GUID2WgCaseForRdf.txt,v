head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2006.06.12.16.43.39;	author SallyHinchcliffe;	state Exp;
branches;
next	;


desc
@
.
@


1.1
log
@Initial revision
@
text
@---+++ The case for RDF
This will get turned into a proper case later by SallyHinchcliffe


Problems with XML -  versioning, difficulty of importing other schema elements, tendency to use structure to enforce rules or semantics

Concerns about RDF - migration, loss of complexity, gain of complexity

6 agreed statements

1.   RDF does not on its own gain us much without associated ontologies or at least common vocabularies

2.   We have the potential to lessen the complexity of our standards by using RDF's inherent modularity

3.   You can fix other people's ontologies (such as FOAF) by using e.g. surname = family name

4.   The domain experience captured by the existing XML schemas will form the basis of our community ontologies but they will need to be significantly refactored - possibly to their advantage (i.e. the baby will not be discarded along with the bathwater)

5.   With XML, for the producing and consuming code, it's an all or nothing understanding of the documents, whereas with RDF some changes to the schemas won't prevent the old code from understanding the new documents (at least in part)

6.   You cannot as easily in RDF control a vocabulary as you can in XML - the advantage of this is extensibility but the downside is a loss of tight control

Still to be done - turn this into a tight case for RDF over (or on top of) XML schemas@
