head	1.8;
access;
symbols;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2007.04.12.23.40.43;	author PeterBrewer;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.09.22.09.12;	author JavierTorre;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.05.12.42.32;	author JavierTorre;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.04.12.22.40;	author TimSutton;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.03.21.27.19;	author JavierTorre;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.03.12.41.17;	author AimeeStewart;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.02.22.07.17;	author AimeeStewart;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.02.13.10.37;	author JavierTorre;	state Exp;
branches;
next	;


desc
@none
@


1.8
log
@none
@
text
@%META:TOPICINFO{author="PeterBrewer" date="1176421243" format="1.1" version="1.8"}%
%META:TOPICPARENT{name="GeoAppInter"}%
---++ Monday April 2nd
   * Planned:
      * Install mapserver and register environmental layers as WCS resources - Tim & Aimee
      * Install an set up a copy of openModeller services on the server - Tim & Renato
      * Name Search Services ready - Bart & Pete
      * Ocurrence services - Dave
      * Scripts to process occurrences - Javi
  
   * Achieved:
      * Install mapserver and register environmental layers as WCS resources - Tim & Aimee
         * mapserver and WCS resources working
         * also library to pull WCS data and save on the filesystem
      * Install an set up a copy of openModeller services on the server - Tim & Renato
         * working
      * Name Search Services ready - Bart & Pete
         * service  finished but needs testing 
         * html front end working
      * Occurrence services - Dave
         * gets GBIF occurrence data
         * gets WFS occurrence data
      * Scripts to process occurrences - Javi

   * Coconuts Required to Achieve Goals: 10

---++ Tuesday April 3
   * Planned
      * implement WCS data pull - Aimee
         * save to /opt/data/envdata, register in catalog - Aimee
         * register /tmp/omcache - Tim
      * implement PHP to interact with OM service - Tim
      * Name Search, Flex front end - Pete
         * output in UTF8
      * Web interface - stub all operations in front page (index)
      * implement connection with Data Processing Service (DPS) - Dave & Javi
         * interface allows load WFS capabilities doc
         * prototype must go through and look for available feature types, check that GML application schema is understandable
      * Make sure 2 parameters are sent for WFS or WCS - base service url and feature type or coverage
      * Create final document structure


   * Achieved:
      * implement WCS data pull
      * MapService creation on the OM server.
      * getAlgorithms, getLayers... almost all done from the Omservice side
      * NameSearch now worksw fine and provide accepted name.
      * HTML interface has fastly improved
      * connection with DPS is working and implemented in Flex.
      * cheks for avaialble featureTypes in a WFS service
      * Passsing parameters between different screens and the final picture is a lit of confussing
      * The document report has not been started...
   * Cost - 5 coconuts
---++ Wednesday April 4
   * Planned
      * Create WCS layer metadata retrieval service - Javier
      * Upload WCS layer to OM server and return OM getLayers compliant ID - Aimee (server side), Tim (php service)
      * Get occurrences from WFS Uri - Dave
      * Run model - a wrapper for createModel, projectModel and getMapAsWcs - Aimee & Tim
      * Complete UI integration PHP (Pete & Bart) - Flex (Javier)
      * Implement OGC result browser (openLayers?) - Dave

   * Achieved:
      * Get occurrences from WFS Uri - Dave
      * Create WCS layer metadata retrieval service - Javier
      * Upload WCS layer to OM server and return OM getLayers compliant ID - Python part done, PHP still half.
      * Run model half implemented
      * OpenLayers installed and preconfigured

---++ Thursday April 5
   * Planned
      * Make the RunModel work with interfaces - Tim, Javi & Pete
      * Finish the openLayers display and implement in the interfaces - Dave + others
      * Create the summary page in the interfaces and check validity of data - Javi
      * Create the documantation base - Aimee
      * Integrate TAPIR stuff in the HTML frontend - Bart
      * Prepare a little bit a demonstration of use - All
   * Achieved
      * Run model seems to work but not much tested
      * the openLayers interface is up and running with some performance issues using MapServer
      * TAPIR integrated in the HTML frontend
      * Demonstrated at CRIA with success :)

---++ Pending issues after the workshop
   * Backend
      * Make the python scripts work with PHP to be able to use WCS resources with openModeller
      * Test the performance of MapServer together with OpenLayers as this looks like it is a problem
      * Implement Catalogue of Life Web services in addition to SPICE

   * HTML frontend
      * Display the model result at the end of the experiment
      * Use of external WCS services for modeling
      * Add CoL web service interface
      * Homogenise textual information with Flex frontend

   * Flex frontend
      * Be able to display occurrences in Yahoo Maps
      * Overlay in Yahoo Maps WMS and WFS of model results
      * Display correct links to occurrences DPS links (like KML, SHP, etc.)
      * Apply the new Flex look, with transitions and so on, from the designer.
      * Homogenise textual information with HTML frontend

   * Documentation
      * Create the workflow diagram as the base for the documentation
      * Create the biogeosdi page, and hosted somewhere with links and so on.
      * Create the screencast of around 20min demonstrating the prototype

   * Server
      * Find a place to host the prototype permanentely

   * General
      * Find funding resources for the next workshop in Bahia.

-- Main.JavierTorre - 02 Apr 2007@


1.7
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="JavierTorre" date="1176156552" format="1.1" reprev="1.7" version="1.7"}%
d88 2
d93 2
d101 1
d104 1
a104 1
      * Create the workflow diagram as the base for the docuementation
d114 1
a114 1
-- Main.JavierTorre - 02 Apr 2007
@


1.6
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="JavierTorre" date="1175776951" format="1.1" version="1.6"}%
d78 24
d103 2
d106 4
a109 1
-- Main.JavierTorre - 02 Apr 2007@


1.5
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TimSutton" date="1175689360" format="1.1" version="1.5"}%
d65 14
@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="JavierTorre" date="1175635639" format="1.1" version="1.4"}%
d55 10
a64 1
   * Viewer
@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="AimeeStewart" date="1175604077" format="1.1" reprev="1.3" version="1.3"}%
a40 1
   * Cost - 12 coconuts
d43 11
d57 1
a57 1
-- Main.JavierTorre - 02 Apr 2007
@


1.2
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="AimeeStewart" date="1175551637" format="1.1" reprev="1.2" version="1.2"}%
d13 2
a14 2
        * mapserver and WCS resources working
        * also library to pull WCS data and save on the filesystem
d16 1
a16 1
        * working
d29 3
a31 1
      * implement WCS data pull, save to /opt/data/envdata, register /tmp/omcache, register in catalog - Aimee
d34 8
a41 3
      * implement connection with Data Processing Service (DPS) 
        * interface allows load WFS capabilities doc
        * prototype must go through and look for available feature types, check that GML application schema is understandable
d44 3
@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="JavierTorre" date="1175519437" format="1.1" version="1.1"}%
d4 6
a9 5
   * Install mapserver and register environamental layers as WCS resources - Tim & Aimee
   * Install an set up a copy of openModeller services on the server - Tim & Renato
   * Name Search Services ready - Bart & Pete
   * Ocurrence services - Dave
   * Scripts to process occurrences - Javi
d11 13
d25 1
d27 8
d37 1
a37 1
-- Main.JavierTorre - 02 Apr 2007@
