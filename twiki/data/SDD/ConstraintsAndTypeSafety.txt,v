head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2009.11.25.03.14.32;	author GarryJolleyRogers;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.20.02.45.23;	author LeeBelbin;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.06.17.30.00;	author TWikiGuest;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.04.11.26.30;	author GregorHagedorn;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.21.11.30.00;	author GregorHagedorn;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.28.17.43.00;	author GregorHagedorn;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.15.14.08.00;	author GregorHagedorn;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.01.22.56.00;	author BobMorris;	state Exp;
branches;
next	;


desc
@none
@


1.8
log
@none
@
text
@%META:TOPICINFO{author="GarryJolleyRogers" date="1259118872" format="1.1" version="1.8"}%
%META:TOPICPARENT{name="ClosedTopicSchemaDiscussionSDD09"}%
---+!! %TOPIC%

(Not sure if this is the right expression of the issue). (This discussion references SDD 0.9beta16). To prevent proliferation of types, we tend to use a single base type of key and of keyref. But often the identity constraints on the uses of keyrefs are in the place where the keyrefs are used and may (a) escape notice and (b)it is confusing that this is actually enforcing that uniqueness of the keys is only up to the place where the keyref constraints are defined. For example, among the three kinds of Frequency modifiers, and the <nop>GeneralModifier and the <nop>CertaintyModifier that can be on a State, there can be overlap in the keys because each has different constraints expressed in the keyrefs. One clarifying approach might be to make each key/keyref pair in use in these contexts have a different type name showing the context, even though the constraint itself determines it and it will be impossible, say, ato have a keyref where an <nop>CertaintyModifier reference is required accidentally reference a Frequency key even should the keys be the same as strings (or, more properly, as integers)

Related(?) question: HowDoCodeGeneratorsEnforceIdentityConstraints?

-- Main.BobMorris - 01 Nov 2003

%META:TOPICMOVED{by="BobMorris" date="1067727817" from="SDD.DerivationsFromTypesWhereTheDerivationsHaveDifferentConstraints" to="SDD.ConstraintsAndTypeSafety"}%
@


1.7
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="LeeBelbin" date="1258685123" format="1.1" reprev="1.7" version="1.7"}%
d5 1
a5 1
(Not sure if this is the right expression of the issue). (This discussion references BDI.SDD 0.9beta16). To prevent proliferation of types, we tend to use a single base type of key and of keyref. But often the identity constraints on the uses of keyrefs are in the place where the keyrefs are used and may (a) escape notice and (b)it is confusing that this is actually enforcing that uniqueness of the keys is only up to the place where the keyref constraints are defined. For example, among the three kinds of Frequency modifiers, and the <nop>GeneralModifier and the <nop>CertaintyModifier that can be on a State, there can be overlap in the keys because each has different constraints expressed in the keyrefs. One clarifying approach might be to make each key/keyref pair in use in these contexts have a different type name showing the context, even though the constraint itself determines it and it will be impossible, say, ato have a keyref where an <nop>CertaintyModifier reference is required accidentally reference a Frequency key even should the keys be the same as strings (or, more properly, as integers)
@


1.6
log
@Added topic name via script
@
text
@d1 2
d5 1
a5 3
%META:TOPICINFO{author="GregorHagedorn" date="1146741990" format="1.0" version="1.5"}%
%META:TOPICPARENT{name="ClosedTopicSchemaDiscussionSDD09"}%
(Not sure if this is the right expression of the issue). (This discussion references SDD 0.9beta16). To prevent proliferation of types, we tend to use a single base type of key and of keyref. But often the identity constraints on the uses of keyrefs are in the place where the keyrefs are used and may (a) escape notice and (b)it is confusing that this is actually enforcing that uniqueness of the keys is only up to the place where the keyref constraints are defined. For example, among the three kinds of Frequency modifiers, and the <nop>GeneralModifier and the <nop>CertaintyModifier that can be on a State, there can be overlap in the keys because each has different constraints expressed in the keyrefs. One clarifying approach might be to make each key/keyref pair in use in these contexts have a different type name showing the context, even though the constraint itself determines it and it will be impossible, say, ato have a keyref where an <nop>CertaintyModifier reference is required accidentally reference a Frequency key even should the keys be the same as strings (or, more properly, as integers)
@


1.5
log
@none
@
text
@d1 2
@


1.4
log
@none
@
text
@d1 8
a8 7
%META:TOPICINFO{author="GregorHagedorn" date="1087817400" format="1.0" version="1.4"}%
%META:TOPICPARENT{name="SchemaDiscussionSDD09"}%
(Not sure if this is the right expression of the issue). (This discussion references SDD 0.9beta16). To prevent proliferation of types, we tend to use a single base type of key and of keyref. But often the identity constraints on the uses of keyrefs are in the place where the keyrefs are used and may (a) escape notice and (b)it is confusing that this is actually enforcing that uniqueness of the keys is only up to the place where the keyref constraints are defined. For example, among the three kinds of Frequency modifiers, and the <nop>GeneralModifier and the <nop>CertaintyModifier that can be on a State, there can be overlap in the keys because each has different constraints expressed in the keyrefs. One clarifying approach might be to make each key/keyref pair in use in these contexts have a different type name showing the context, even though the constraint itself determines it and it will be impossible, say, ato have a keyref where an <nop>CertaintyModifier reference is required accidentally reference a Frequency key even should the keys be the same as strings (or, more properly, as integers)

Related(?) question: HowDoCodeGeneratorsEnforceIdentityConstraints?

-- Main.BobMorris - 01 Nov 2003
@


1.3
log
@none
@
text
@d1 2
a2 2
%META:TOPICINFO{author="GregorHagedorn" date="1085766180" format="1.0" version="1.3"}%
%META:TOPICPARENT{name="SchemaDiscussion"}%
@


1.2
log
@none
@
text
@d1 3
a3 3
%META:TOPICINFO{author="GregorHagedorn" date="1071497280" format="1.0" version="1.2"}%
%META:TOPICPARENT{name="Trash.LisbonTopicsForFurtherDiscussion"}%
(Not sure if this is the right expression of the issue). (This discussion references SDD 0.9beta16). To prevent proliferation of types, we tend to use a single base type of key and of keyref. But often the identity constraints on the uses of keyrefs are in the place where the keyrefs are used and may (a) escape notice and (b)it is confusing that this is actually enforcing that uniqueness of the keys is only up to the place where the keyref constraints are defined. For example, among the three kinds of Frequency modifiers, and the <nop>GeneralModifier and the <nop>UncertaintyModifier that can be on a State, there can be overlap in the keys because each has different constraints expressed in the keyrefs. One clarifying approach might be to make each key/keyref pair in use in these contexts have a different type name showing the context, even though the constraint itself determines it and it will be impossible, say, ato have a keyref where an UncertaintyModifier reference is required accidentally reference a Frequency key even should the keys be the same as strings (or, more properly, as integers)
@


1.1
log
@none
@
text
@d1 2
a2 2
%META:TOPICINFO{author="BobMorris" date="1067727360" format="1.0" version="1.1"}%
%META:TOPICPARENT{name="LisbonTopicsForFurtherDiscussion"}%
@
