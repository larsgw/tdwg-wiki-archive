head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2007.01.09.00.00.00;	author MoinMoin;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.09.00.00.00;	author MoinMoin;	state Exp;
branches;
next	;


desc
@Initial revision
@


1.2
log
@Revision 2
@
text
@---+ RecordObject
The protocol is record oriented in a way that it returns lists of something.
This something is called a record or RecordObject when we are talking about the structure of it.
The record element itself is defined by the protocol already (and mapped to a table when configuring a provider). All elements immediately following the Record element are defined in other schemas and are called RecordObjectProperties or short just properties. These properties can be complex and have a nested structure, but only the "root" elements within a Record element are considered being properties. This corresponds to classes having properties which themselves can be complex data types (being lists of other objects for example).
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
The record element itself is defined by the protocol already. All elements immediately following the Record element are defined in other schemas and are called RecordObjectProperties or short just properties. These properties can be complex and have a nested structure, but only the "root" elements within a Record element are considered being properties. This corresponds to classes having properties which themselves can be complex data types (being lists of other objects for example).
@
