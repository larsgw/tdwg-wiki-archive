head	1.5;
access;
symbols;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2007.06.08.10.29.32;	author GregorHagedorn;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.05.10.23.22;	author GregorHagedorn;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.03.13.02.40;	author GregorHagedorn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.02.18.22.33;	author RicardoPereira;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.28.10.18.57;	author GregorHagedorn;	state Exp;
branches;
next	;


desc
@none
@


1.5
log
@none
@
text
@%META:TOPICINFO{author="GregorHagedorn" date="1181298572" format="1.1" version="1.5"}%
%META:TOPICPARENT{name="ArchitectureOverview"}%
(Content wiped, please refer to history if needed. The topic should be continued under [[http://wiki.tdwg.org/twiki/bin/view/GUID/WhyWeShouldNotUseLSIDs]])@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="GregorHagedorn" date="1146824602" format="1.1" version="1.4"}%
d3 1
a3 161
---+ <nop>%TOPIC%

Rather surprisingly, one outcome of the TagMeeting1 for me was that I believe GBIF and TDWG should *not use LSIDs*

Advantages of LSIDs
   * In contrast to DOIs, they allow both local and shared management and carry no cost factor.
   * LSIDs seem to be flexible, allowing for a distributed control of globally unique identifiers (especially small institutions which are unable or do not desire to set up their own lsid authority could instead register namespaces with a central gbif authority, and then manage only their own uniqueness within this namespace.
   * LSIDs separate the issue of truly persistent identifiers from the management of the conventional URLs (which are both semantically and managementwise overloaded, causing great instability). Although good management practices allow to set up a system where URLs intended to be persistent are well separated from those that may change (and where management is not cost-effective) in reality the conventional web mechanisms lend itself easily to improper management, mixing these different URLs and making it hard to persist URLs through forwarding.
   * They do offer a separation of data and metadata, and provide a versioning system.

Disadvantages of LSIDs
   * The version system does not work very well as long as no standard metadata is delivered that always points to the most recent version.
   * As discussed on the TAG 1 meeting, LSIDs can not be expected to work with ontologies. *LSIDs are not interoperable with semantic web technologies*.

The general conclusion at the meeting was that is would be ok to use LSIDs for specimens and taxon names, but avoid them for class and property concepts (i.e. use standard URLs for software-design ontology. However, I believe we should go further and avoid LSIDs altogether. They are ok for specimens, but for taxon names, taxon concepts, descriptive concepts, geographical concepts they are ok only in the near future. 

Ultimately, we very much want to reason on taxon generalizations along the taxonomic rank hierarchy as well as on taxon concept relationships, on generalization relationships between organism parts, observations methods, properties and property values. Examples: Both a leaf and a cladode being a kind of leaf-like structure, which organisms leaf-like structures 10 cm long with 5 leaflets? both ovate and elliptical being roundish shapes, which organisms have roundish leaf-like structures?

My feeling is that adopting LSIDs for taxon and descriptive concepts may preclude the use of standard machine-reasoning engines for biodiversity data in the future.

I believe we should UsePURLsAsGUIDs.

----

We could also UseLsidsWithHttpProxy to overcome the issues you raised with advantages over your proposal of replacing LSID by PURL.

-- Main.RicardoPereira - 02 May 2006

Which exactly are these advantages of LSIDs over a possibly gbif-run purl server? Anything more than I list above? -- Main.GregorHagedorn - 03 May 2006

----

By email Kevin Richards comments: I agree that PURLs are a perfectly good option for our GUID needs, and that they would probably be
one of the easier technologies to get "working". Like [Roger] I really had to think again to work out the benefits of LSIDs over PURLs, expecially
considering the disadvantage you have mentioned.

Some of the benefits of LSIDs include:
   * clearly separate data and metadata services (as you have mentioned)
      * Markus Döring comments: From what I've understood from the GUID group nearly only metadata is used though. So if we deal
with metadata only then its not a big practical difference at least.
   * separation from domain names - as far as I understand, the PURL still requires domain name resolution of the actual ID url to obtain the resolution server address - this ties you to a particular url format
      * Markus Döring comments: We could easily setup a redirection service http://purl.gbif.net/AUTHORITY/whatever that redirects to whereever you want to keep your resolver. Just the authority URL part needs to be centrally managed. <br/> MD: This leads me to a questions about LSIDs which I never understood. LSID are bound to domain name resolution and their guarantee to be globally unique is heavily based on DNS. So to me a central body keeping track of LSID authorities is required to guarantee life long uniqueness of LSID URNs. If "bgbm.org" is owned by someone different that also wants to set up a LSID authority, how does he know there was one already under that domain? He could be reissuing the same URN (LSID) again. Thats exactly what people use as an argument against URLs, but its also true for LSIDs as far as I understand the technology.
   * LSID assigning service can be managed by provider organisation ("ownership" of data and IDs is often high on a data provider's requirements list)
      * Markus Döring comments: so can PURLs
   * LSIDs provide a "standard" technology for resolving and serving up data objects - ie every provider will have the LSID authority services running on their server that will serve up data and metadata (+ other services if required) in the same way, for every provider
      * Markus Döring comments: URLs are even more standard I would think. Take Apache and there you go.
   * related to the previous point, a standard mechanism for third party annotations of LSIDs is provided with every LSID server implementation
      * Markus Döring comments: Annotea (for RDF) uses simple HTTP. As Rod said pingbacks are a way to go as well (over http). And I am sure there are many other standards existing for URLs.
   * same URN LSID can be used for resolution of http, ftp, soap and tcp protocols (unsure how PURLs handle this?)
      * Markus Döring comments: true. but is that needed?
   * ...other cool stuff, I'm sure, that I cant think of right now - too late at night

Probably best to avoid LSIDs for RDF class identfiers etc, but do the semantic web tools you are talking about have no way of recognising different url resolution types - I'm wondering if you can "plug in" lsid resolution into these tools?

Kevin

----

Steven Perry writes (by email):

PURLs are centrally managed indirection-through-redirection over HTTP.  Because resolution is only an HTTP call away, PURLs are both easy to understand and very easy to consume.  PURLs are also powerful because anything that can be assigned a URL can have a PURL (maybe that makes them too powerful). 
   * There are some advantages to PURLs:
      * PURLs are easy to consume
      * PURLs require a central resolver which may provide greater 
reliability than a network with many LSID authorities
      * PURLs make it easy to solve the "single resource change in 
custodianship" problem
   * And I see some disadvantages to PURLs:
      * PURLs require a central resolver which is a single point of failure
      * There are no conventions about what to expect when you resolve a PURL
      * PURLs may be easy to consume but they're not easy to produce
      * PURLs can't be distinguished from URLs by software

I'll address each with a sentence or two.

a1.) PURLs are easy to consume

Because PURLs rely on simple HTTP GET, they are trivial to resolve.  One can use a web browser to manually resolve a PURL or use any of a large number of programs or software libraries for fetching URL contents via HTTP GET.  This is the primary advantage of PURLs.


a2.)  PURLs require a central resolver which may provide greater reliability than a network with many LSID authorities

If we assume that it's equally likely that a given GUID could be resolved by any of the resolvers on the network, then the reliability of the GUID network reduces to the average resolver reliability.  If it turns out that there are 100 LSID resolvers but at any given time 20 are likely to be non-responsive, then it's quite possible that a PURL based network with a single well managed resolver (98 % uptime) could provide better quality of service than an LSID-based network.


a3.) PURLs make it easy to solve the "single resource change in custodianship" problem

If the ownership or location of a data object changes, its PURL wouldn't change, it would merely redirect you to the new location of the object. This is a potential problem with LSIDs because change in custodianship of an entire authority is easy to deal with, but change in custodianship of a single identified object is difficult to handle.




d1.) PURLs require a central resolver which is a single point of failure

A PURL resolver acts as a centralized registry.  While a single PURL resolver my provide better reliability than a distributed network of LSID resolvers, centralization comes at a cost.  A central PURL resolver is a single point of failure.  To guard against failure, the community must guarantee that the organization hosting the resolver will be funded over time and that it will work to prevent hardware issues, network outages, denial of service attacks, etc.  The community may also demand that the organization that hosts the PURL resolver provide technical support. 


d2.) There are no conventions about what to expect when you resolve a PURL

Under the OCLC's purl.org resolver, there are no conventions about what you get when you resolve a PURL.  A PURL can point to a chunk of RDF describing a particular specimen, a DVD rip of a Bollywood movie, a second PURL that redirects to the first PURL in an endless loop, or a web application that returns no content but sends a signal to your fancy new networked coffee machine telling it to make a double espresso.  Some of these examples are silly, but my point is that PURL only provides for the possibility of persistence through indirection.  We're not interested solely in indirection.  We want to build a set of services on top of whatever GUID system we select.  This set of services requires common agreement on what you get when you resolve a GUID.  The LSID spec attempts to address this issue by splitting the universe into data and metadata and strongly suggesting the use of RDF for metadata.  There is no agreement on what you get when you resolve a PURL, and even if we came to agreement within our community there's no software in place to help us enforce these conventions.

d3.) PURLs may be easy to consume but they're not necessarily easy to produce

PURLs are easy to resolve but hard to register.  A central PURL resolver has to provide functionality for registering PURLs and assigning/reassigning live URLs to them.  It's simple to envision a web-based form for registering PURLs (see http://www.purl.org/maint/choose.html), but I imagine that most of the time new PURLs will be requested by a piece of software that's trying to publish a large number of resources.  This means that the PURL resolver should provide a remote service (software interface) for registering a new PURL, in part to facilitate automated registration of a large number of identifiers.  Interestingly enough, I don't think the OCLC PURL resolver implementation provides this functionality.  I imagine that most people who want to register a large number of PURLs work around the problem by registering what OCLC calls a "partial redirection" (http://purl.oclc.org/docs/inet96.html#partial).  I don't consider partial redirects to be GUIDs because they allow the use of a domain as a prefix for a localized URL hierarchy.  In order to guarantee that I don't mess up your PURLs, the OCLC PURL resolver require authentication in order to register a new PURL.  Authentication systems aren't easy to implement or support.

d4.) PURLs can't be distinguished from URLs by software

Most GUID systems come with a set of assumptions about when and how it's appropriate to use a GUID.  In addition to distributed resolution we might want to use GUIDs for things like equality testing, versioning, or object composition.  Each of these uses raise questions that need to be sorted out.  For instance, with equality testing, do we want to be able to have software say that two things are equal if their GUIDs are bitwise identical?  If two GUIDs are not bitwise identical, can they refer to the same object?  Do we require that different versions of the same object have the same GUID, different GUIDs with a relationship between them asserted in metadata, or the same base GUID with a different version component tacked onto the end?  What about different representations (formats) of the same thing (say an XML and an RDF version)?  Can they have the same GUID?  How does our object equality testing by GUID choice affect our choice of how to do versioning? How do we actually compose a compound object out of simple related objects?  All of these questions require careful consideration and are affected by our choice of a GUID system. 

I guess what I'm trying to say is that we're not interested in GUIDs for the sake of GUIDs alone, but instead require them for specific uses that extend beyond simple naming and resolution.  I hope that we'll examine some of these questions and come to agreement on our conventions for GUID use.  Once we have these conventions (either because they're embedded in the GUID scheme we choose or because we've arrived at them during meetings and documented them appropriately), we'll need to write software that operates on these assumptions and enforces these conventions.  That software will have to be able to distinguish a GUID from a non-GUID because we can do certain things with GUIDd objects that we can't do with non-GUIDd ones.  With PURL this is problematic because a piece of software cannot easily distinguish a PURL from a URL yet they probably ought to be treated differently.


I'm not a huge fan of LSID.  I think a urn based identification system introduces a barrier to entry for some.  I think the SOAP/web services stuff in the LSID spec and the Java toolkit from IBM introduce another barrier.  PURL may be easier to use (at least for resolution), but it doesn't go as far as LSID in laying the groundwork for a network of services that can at the very least share data, if not actually help researchers do something interesting with it.

I'm not against inventing something new that's essentially a set of restrictions on top of PURL.  Maybe we could get the best of both worlds -- the simplicity of PURL with the conventions of LSID.


-- Steve

----

Gregor: I would like to comment on some of the disadvantages listed by Steve:

"d1.) PURLs require a central resolver which is a single point of failure"

I see no difference between lsid and purl here. We can set up a single or multiple lsid authorities, or a single or multiple purl services.

"d2.) There are no conventions about what to expect when you resolve a PURL"

LSIDs provide only a partial solution, since no agreement exists which  metadata you get from an lsid service, GBIF/TDWG has to design that entirely themselves. So you may not know what kind of data are behind an LSID. What I propose is to simply use content negotiation in combination with purls to achieve exactly the same system. We simply, within our network, agree that when contacted with some ACCEPT: xml-metadata (MY EXAMPLE, IS THERE ALREADY SOMETHING FOR THIS PURPOSE) should return metadata, with all other ACCEPT the data. To me this gives all the advantages of LSIDs without the disadvantages. WOULD THIS WORK?

"d3.) PURLs may be easy to consume but they're not necessarily easy to produce"
 
It seems to me that it should be simple enough to mimic the good sides of LSIDs and simply create a PURL resolver that only registers namespaces, but not IDs. That is, I register the namespace "LIAS" with purl.gbif.net as as synonym to "www.LIAS.net/names/webservice". If I try to resolve "purl.gbif.net/LIAS/149872", the purl service will issue a rewrite/forward to  "www.LIAS.net/names/webservice/149872". I believe this is very thin management shell over existing forwarding modules in, e.g., apache.

In fact, when registering a purl namespace, a data provider may even decide:
   * I want to handle metadata content negotiation myself
   * metadata requests should go to a different service ("www.LIAS.net/names/metadata/149872").
   * I cannot handle metadata, but I can register common metadata applicable to all objects within the registered namespace (the purl service could then report these common metadata).

What Steve describes as "partial redirection" seems to be close to such a system (albeit without metadata proposed above). 

With regard to the statement: "I don't consider partial redirects to be GUIDs because they allow the use of a domain as a prefix for a localized URL hierarchy.  In order to guarantee that I don't mess up your PURLs, the OCLC PURL resolver require authentication in order to register a new PURL.  Authentication systems aren't easy to implement or support." I do not see the difference to LSIDs. The authority will in many cases only be such a partial redirection service, unable to verify that ALL possible LSIDs remain valid. So an LSID system is no more validated that a partial PURL system.

Steve lists a number of shortcomings or things that need to be decided (equality testing, bitwise GUID-identity, versions, representations (formats), composing compound objects), but I believe all are equally problematic for PURL and LSID systems.

After all it looks almost like GBIF will be one of very few systems to adopt LSIDs. So we may just as well in our community instead of relying on a urn:lsid prefix rely on a convention that all purl services must start with http://purl. 

"Maybe we could get the best of both worlds -- the simplicity of PURL with the conventions of LSID."

To me this seems to be quite achievable.

For the last two years I always thought LSIDs are truly nice, I am only just changing my mind. Most LSIDs conventions are really good, including the separation into authority, namespace, ID, and the idea of separating data and metadata, and the ability to recognize (whether for software or human management) which URI is to be permantent. I believe we easily mimic all these based on PURL (I say this with almost no technical understanding...)

-- Main.GregorHagedorn - 05 May 2006

----


(Ricardo notes that there is also a specialized wiki: [[http://wiki.gbif.org/guidwiki/wikka.php]] and a mailing list [[http://mailman.nhm.ku.edu/mailman/listinfo/tdwg-guid]]
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="GregorHagedorn" date="1146661360" format="1.1" version="1.3"}%
d61 101
d163 1
a163 1
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%
@


1.2
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RicardoPereira" date="1146594153" format="1.1" version="1.2"}%
d26 1
d31 1
d34 28
@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="GregorHagedorn" date="1146219537" format="1.1" version="1.1"}%
d8 1
a8 1
   * In contrast to DOIs, they allow both lokal and shared management and carry no cost factor.
d26 6
a32 1

@
