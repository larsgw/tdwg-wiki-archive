head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2006.04.25.07.34.18;	author GregorHagedorn;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.22.14.15.27;	author RogerHyam;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.06.15.27.24;	author RogerHyam;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.28.15.48.37;	author RogerHyam;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.18.10.52.01;	author RogerHyam;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.16.01.46;	author RogerHyam;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.26.12.15.36;	author RogerHyam;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.26.11.08.53;	author RogerHyam;	state Exp;
branches;
next	;


desc
@none
@


1.8
log
@none
@
text
@%META:TOPICINFO{author="GregorHagedorn" date="1145950458" format="1.1" version="1.8"}%
%META:TOPICPARENT{name="MainSections"}%
---+ Requirements Elicitation

This is the main page for definition of the requirements of a TDWG Architecture. Please read the RequirementsElicitationProcess for details on how this page is organised.

---++ Actors
   * ActorExistingDataSources

---++ Scenarios
These will eventually be placed within UseCases and filed in a section below.
   * ScenarioDarwinCoreObisExtension
   * ScenarioDarwinCoreManisExtension
   * ScenarioDarwinCoreMicrobialExtension
   * ScenarioDarwinCoreBotanicalExtension
   * ScenarioMappingDarwinCore2Abcd
   * ScenarioMappingHispid2Abcd
   * ScenarioDigirBioCase
   * ScenarioMelissopalynologyNet
   * ScenarioDesmidSurveyNet
   * ScenarioLimnoGene
   * ScenarioLimnoPortal

FIXME - some ABCD extension examples?

---++ Requirements
---+++ Must
   * UseCaseManageStandardSpecification
   * UseCaseResolveObject
   * UseCaseSearchForObjects
   * UseCaseMergeData
   * UseCaseVisualiseData
   * UseCaseCrawlData
   * UseCaseCollaborativeDocumentEditing
   * UseCaseArchiveDataForFutureRevision

---+++ Should
   * UseCaseQueryDataSource
   * UseCaseRelateStandard
   * UseCaseAutoDiscoverStandard
---+++ Could
   * UseCaseAutoDocumentStandard
---+++ Won't@


1.7
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1140617727" format="1.1" version="1.7"}%
d34 2
d43 1
a43 1
---+++ Won't
@


1.6
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1133882844" format="1.1" version="1.6"}%
d28 7
a34 5
   * UseCaseCreateStandard
   * UseCaseChangeStandard
   * UseCaseExtendStandard
   * UseCaseCombineStandards
   * UseCaseRetireStandard
d36 1
@


1.5
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1133192917" format="1.1" version="1.5"}%
d12 7
d24 2
d38 1
a38 1
---+++ Won't@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1132311121" format="1.1" version="1.4"}%
d8 1
d29 1
a29 1
---+++ Won't
@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1132156906" format="1.1" version="1.3"}%
d16 1
a16 7
---++ Functional Requirements
---+++ Must
---+++ Should
---+++ Could
---+++ Won't

---++ Nonfunctional Requirements
d18 5
d24 2
d27 1
@


1.2
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1130328936" format="1.1" version="1.2"}%
d8 8
d26 1
a26 1
---+++ Won't@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1130324933" format="1.1" version="1.1"}%
d5 1
a5 10
This is the main page for definition of the requirements of a TDWG Architecture. Requirements are defined in terms of Actors, Scenarios and Use Cases. 
   * An actor is an external entity that interacts with the system. e.g. a data supplier or data consumer. In this wiki topics describing an actor should begin with the word Actor.
   * A scenario describes an example of an actual use of the system (though it may be imaginary) e.g. "Joe the developer wants to publish his transect data for the last 5 years". In this wiki topics describing scenarios should begin with the word Scenario.
   * A use case is an abstraction that describes a class of scenarios. e.g. "A data supplier should be able to publish data". In this wiki topics describing a use case should begin with the words <nop>UseCase.

Requirements are either Functional or Non-Functional. 
   * Functional requirements describe the interaction between the system and its environment independent of the implementation.
   * Nonfunctional requirements describe the implementation specific features such as performance.

This wiki is structured so that this page contains links to a series of use cases ordered by Functional/Nonfunctional then their MoSCoW priority. Each use case may then contain links to supporting scenarios. Scenarios which have not been placed in any one use case can be linked to directly from this page.
d18 1
a18 1
---+++ Won't
@
