head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2005.11.23.10.05.26;	author RogerHyam;	state Exp;
branches;
next	;


desc
@none
@


1.1
log
@none
@
text
@%META:TOPICINFO{author="RogerHyam" date="1132740326" format="1.1" version="1.1"}%
%META:TOPICPARENT{name="SimilarSystems"}%
---+ <nop>%TOPIC%

Science progresses through a process of suggesting hypotheses, testing them and abandoning those that can be proved false. A formal software design process uses this methodology on the small scale. Scenarios are captured and tested, use cases are defined and re-examined, models are built and compared to use cases etc. There is no doubt that this is a disciplined and correct way to devise a software architecture. What is leaves out, though, are the large jumps that occur in everday conversation over a coffee or beer. It is far more likely that some one will say "Why don't you just do the whole thing in XYZ" than they will discuss the delimitation of a particular UML Actor. 

The formal design process does not provide a good sales document. It is not easy to way up the pros and cons of different approaches in the round.

This section allows for testing of larger hypotheses that crop up from time to time and capturing knowledge associated with testing these hypotheses. Because it is embedded within a more formal design process it can link directly to use cases etc as to support the testing process.

   * HypothesisJustRdfOwl - [[http://www.w3.org/2001/sw/][W3C Semantic Web Activity]] appears to provide all the tools required to build a rich data exchange system. Why don't we just use them? 


----
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%
@
