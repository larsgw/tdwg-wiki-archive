head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2006.05.10.09.31.51;	author GregorHagedorn;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.04.11.09.39;	author GregorHagedorn;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.29.18.45.17;	author GregorHagedorn;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.27.14.37.24;	author RogerHyam;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.04.17.34.27;	author RogerHyam;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.04.16.23.12;	author RogerHyam;	state Exp;
branches;
next	;


desc
@none
@


1.6
log
@none
@
text
@%META:TOPICINFO{author="GregorHagedorn" date="1147253511" format="1.1" version="1.6"}%
%META:TOPICPARENT{name="MainSections"}%
---+ <nop>%TOPIC%

-------
*Combining RDF and XML Schemas to Enhance Interoperability Between Metadata Application Profiles*

http://archive.dstc.edu.au/RDU/staff/jane-hunter/www10/paper.html 

Roger's notes: Interesting stuff with a few more leads in it. Two things that both me:
   * They suggest that XML Schema simple and complex types should bear links to semantic meaning in an RDF file. This is "crazy" if you ask me. A complex type is like a data structure that may be used with completely different semantic meaning. In TCS we have a nomenclatural note type that is a general data structure we use for different elements that have completely different meaning for example. Tagging should be elements and only maybe types but the thing is confused - which is all part of the problem.
   * Gregor: I do not think it is crazy, I think you just have a very specific idea of what is "semantic". If I understand Tim Berners-Lee about RDF correctly, he says that the semantic web and RDF is not about semantic as a whole, but only about a small solvable fragment of semantics. Same for these proposals. If you use a complex type in multiple different contexts, it still keeps it's semantics - no matter how many subtypes you may further want to derive within each context. Note that the same is true for RDF: you can use a single property on many classes, and the exact semantics will certainly change depending on the class it is associated with, only the general semantics will remain.
   * They don't mention OWL or any other ontology language which might go a way to solving their problem without XML Schema.
   * Gregor: The paper is undated, but seems to be around 2000/2001 - small wonder they don't mention OWL. They do mention OIL though...

Interesting stuff on RDF and XSLT - was thinking of suggesting that but will have to look into it.

-------

*Presenting tailored resource descriptions: Will XSLT do the job?*

http://www.cee.hw.ac.uk/~alison/www9/paper.html

Roger's notes: Generating human readable text from RDF metadata descriptions of documents. Gives some good hints on transforming RDF with XSLT including normalising it first. 

-------

*From XML to RDF: how semantic web technologies will change the design of 'omic' standards*

http://www.nature.com/nbt/journal/v23/n9/full/nbt1139.html

Good summary paper for move to RDF.

-------

*List of OWL Ontologies based on Geographic Norms*
http://loki.cae.drexel.edu/~wbs/ontology/list.htm

----

Bob Morris: [[http://www.hpl.hp.com/techreports/2005/HPL-2005-189.pdf][An assessment of RDF/OWL modelling]] by Dave Reynolds, Carol Thompson, Jishnu Mukerji, Derek Coleman, Digital Media Systems Laboratory HP Laboratories Bristol HPL-2005-189 October 28, 2005* is a very balanced piece on the strengths and weaknesses of RDF. It includes a short introduction to RDF. -- Main.BobMorris - 08 Apr 2006

----

%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%@


1.5
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="GregorHagedorn" date="1146740979" format="1.1" version="1.5"}%
d10 1
a10 3
Roger's notes: 

Interesting stuff with a few more leads in it. Two things that both me:
d13 2
a14 1
   * They don't mention OWL or any other ontology language which might go a way to solving their problem without XSL Schema.
d24 1
a24 3
Roger's notes:

Generating human readable text from RDF metadata descriptions of documents. Gives some good hints on transforming RDF with XSLT including normalising it first. 
d44 1
@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="GregorHagedorn" date="1146336317" format="1.1" version="1.4"}%
d42 3
d47 1
a47 1
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%
@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1146148644" format="1.1" version="1.3"}%
d14 1
d44 1
a44 1
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%@


1.2
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1136396066" format="1.1" version="1.2"}%
d36 6
@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="RogerHyam" date="1136391792" format="1.1" version="1.1"}%
d28 7
d37 1
a37 1
%SEARCH{"%TOPIC%" excludetopic="%TOPIC%" header="*Linking Topics*" format="   * $topic" nosearch="on" nototal="on" }%
@
